2003-05-14  Dan Winship  <danw@ximian.com>

	* libsoup/soup-socket.c: Add a "connected" signal and use that
	rather than a callback. Update things accordingly.

	* libsoup/soup-connection.c: Update for SoupSocket change, and
	remove all proxy and SOCKS stuff.
	(class_init): add get_remote_address and start_request methods,
	override SoupSocket's connected signal, and implement
	set_property. Install the "auth_context" property.
	(set_property): implement
	(connected): Just set up the death watch. (Remove proxy stuff)
	(soup_connection_new): Remove callback args; the caller can listen
	to the signal.
	(soup_connection_get_remote_address): New, to get the remote
	SoupAddress, so that theoretically connections could be shared
	among virtual servers on a host, and non-tunneled proxy
	connections don't need to be per-dest-host. (Not yet used).
	(soup_connection_start_request): Make this a method.

	* libsoup/soup-proxy-connection.c: Subclass of SoupConnection for
	HTTP proxies.
	(soup_proxy_connection_new): Replaces
	soup_connection_new_via_proxy
	(connected): Do HTTPS tunnel setup, if needed
	(get_remote_address): Return NULL if this isn't a tunnel.
	(start_request): Do proxy auth then call parent method

	* libsoup/soup-message.c (soup_message_send_request): Use
	SOUP_IS_PROXY_CONNECTION rather than soup_connection_is_via_proxy.

	* libsoup/soup-context.c (try_create_connection): Update

	* libsoup/Makefile.am (libsoupinclude_HEADERS,
	libsoup_2_0_la_SOURCES): Add soup-proxy-connection, remove
	soup-socks (for now).

2003-04-25  Dan Winship  <danw@ximian.com>

	* libsoup/soup-connection.c: Remove some unused #includes
	(SoupConnectionPrivate): Add ac and proxy_ac fields
	(finalize): Unref them
	(soup_connection_new, soup_connection_new_via_proxy): Add ac and
	proxy_ac args, for setting the connection's auth context and proxy
	auth context.
	(soup_connection_is_via_proxy): New, returns whether or not the
	connection is using a proxy
	(soup_connection_start_request): Set a SoupMessage's connection
	field, add Authorization and Proxy-Authorization headers if
	available, set up 401 and 407 handlers, and pass off to
	soup_message_send_request.

	* libsoup/soup-context.c (try_create_connection): Pass
	authcontexts to soup_connection_new{,_via_proxy}.

	* libsoup/soup-message.c (soup_message_send_request): Basically
	formerly soup-queue.c:start_request. Move all the transfer code
	from soup-queue here.
	(soup_get_request_header): Remove authorization handling since
	that's done before this now. Decide whether to use full URI or
	just path based on soup_connection_is_via_proxy().
	(global_handlers): Remove 401 and 407 handlers

	* libsoup/soup-queue.c: Remove a lot of code that's in
	soup-message.c now.

2003-04-20  Dan Winship  <danw@ximian.com>

	* libsoup/soup-auth.c: Make this a GObject and an abstract base
	class. Change the methods around some.
	(soup_auth_get_protection_space): New method, to get the
	protection space covered by an auth (so we can handle Digest
	auth's "domain" directive properly).

	* libsoup/soup-auth-basic.c: Basic auth code

	* libsoup/soup-auth-digest.c: Digest auth code

	* libsoup/soup-auth-context.c: New class that manages SoupAuths.
	Merges code that used to be in soup-auth.c, soup-message.c, and
	soup-queue.c and deals with a bunch of cases the old code didn't.

	* libsoup/soup-www-auth-context.c: Implementation for standard
	http authentication

	* libsoup/soup-proxy-auth-context.c: and proxy authentication

	* libsoup/soup-marshal.list: Add (for SoupAuthContext's
	authenticate signal)

	* libsoup/Makefile.am: build soup-marshal.[ch], add new files

	* libsoup/soup-context.c (soup_context_from_uri): Create an auth
	context on each new SoupHost and connect to its "authenticate"
	signal.
	(authenticate): Handle the authcontext's "authenticate" signal by
	looking for auth info on the URI
	(soup_context_unref): Unref the authcontext

	* libsoup/soup-error.[ch]: Remove SOUP_ERROR_CANT_AUTHENTICATE and
	SOUP_ERROR_CANT_AUTHENTICATE_PROXY. We will just return
	SOUP_ERROR_UNAUTHORIZED and SOUP_ERROR_PROXY_UNAUTHORIZED.

	* libsoup/soup-headers.c (soup_header_param_get_token): Returns a
	(const) token from the param hash without copying it. Saves us
	some strdup'ing.
	(soup_header_param_decode_token): Make the input const.

	* libsoup/soup-message.c (authorize_handler): Mostly moved to
	soup_auth_context_handle_unauthorized. authorize_handler now just
	calls that and requeues the message if it returns TRUE.

	* libsoup/soup-queue.c (soup_get_request_header): Call
	soup_auth_context_authorize_message to set Authorization and
	Proxy-Authorization headers if needed

	* libsoup/soup-server-auth.c: s/SoupAuthType/SoupServerAuthType/
	everywhere since SoupAuthType isn't used any more. This still
	needs rewriting.

	* tests/auth-test.c: New program to test the auth code

2003-04-20  Dan Winship  <danw@ximian.com>

	* libsoup/soup-dns.c: Fix up #includes a bit (so it will compile on
	OS X). Make socklen_t default to int, not size_t

	* libsoup/soup-socket.c: Likewise

	* libsoup/soup-openssl.c: Fix up #includes for OS X

2003-04-18  Dan Winship  <danw@ximian.com>

	* libsoup/soup-message.c: Make this a GObject. Remove a few unused
	functions that haven't actually worked right for ages.

	* libsoup/soup-server-message.c: Make this a proper subclass of
	SoupMessage and make all of its data private.
	(soup_server_message_get_client): New, to get the client address

	* libsoup/soup-server.c (soup_server_context_get_client_address):
	Use soup_server_message_get_client.

	* ... update (mostly refcounting and g_return_if_fails)

2003-04-18  Dan Winship  <danw@ximian.com>

	* libsoup/soup-server.c: Make this a GObject and an abstract base
	class. Also remove all the SoupServerMessage code.

	* libsoup/soup-server-tcp.c: TCP-based SoupServer class.

	* libsoup/soup-server-cgi.c: CGI-based SoupServer class. Totally
	untested after porting, but then, I'm not sure it was really
	tested before porting either.

	* libsoup/soup-server-message.c: Move SoupServerMessage code here

	* libsoup/soup-types.h: add typedefs for new classes. Also define
	SoupProtocol and SoupAddressFamily (ipv4/ipv6) here

	* libsoup/soup-address.c (SoupAddressPrivate): change "family" to
	a SoupAddressFamily
	(soup_address_new_any): Likewise

	* libsoup/soup-dns.c (soup_ntop, soup_gethostbyaddr): change
	"family" to a SoupAddressFamily

	* libsoup/soup-socket.c (soup_socket_get_iochannel): Call
	g_io_channel_set_close_on_unref on the channel.
	(finalize): Only close the fd if there's no iochannel. (Makes it
	possible to keep the iochannel+fd around after destroying the
	socket if you want.)
	(got_address): Use soup_socket_get_iochannel

	* libsoup/soup-uri.h: #include soup-types for SoupProtocol

	* libsoup/Makefile.am (libsoup_2_0_la_SOURCES,
	libsoupinclude_HEADERS): add new files

	* tests/simple-httpd.c (server_callback): print request headers
	and body as well.
	(main): Update for soup-server changes

	* tests/timeserver.c (main): Update for SoupAddressFamily

2003-04-17  Dan Winship  <danw@ximian.com>

	* libsoup/soup-socket.c (soup_socket_get_iochannel): Don't ref the
	channel.
	(soup_socket_get_local_address, soup_socket_get_remote_address):
	Don't ref the address

	* libsoup/soup-connection.c (socket_connected): Don't unref the
	socket's channel
	(soup_connection_get_iochannel): Update docs

	* libsoup/soup-queue.c (soup_queue_read_done_cb): Don't unref the
	connection's channel
	(start_request): Likewise

	* libsoup/soup-server.c (destroy_message): Don't unref the
	socket's iochannel (or leak an extra copy for that matter).
	(issue_bad_request): Don't unref the channel.
	(read_done_cb, conn_accept, soup_server_run_async): Likewise
	(read_headers_cb): Don't unref the socket's local address
	(soup_server_context_get_client_host): Don't unref the socket's
	remote address

	* libsoup/soup-socks.c (soup_lookup_dest_addr_cb): Don't unref the
	socket's channel
	(soup_socks_proxy_connect): Likewise

2003-04-16  Dan Winship  <danw@ximian.com>

	* libsoup/soup-connection.c: Make this a subclass of SoupSocket.
	(soup_connection_new, soup_connection_new_via_proxy): Return a
	SoupConnection rather than a SoupConnectId
	(soup_connection_cancel_connect): Gone. The caller can just unref
	the connection before it's done connecting.
	(soup_connection_close): Replaces soup_connection_release. Marks
	it not-in-use and unrefs it, which should close it.
	(soup_connection_set_keep_alive, soup_connection_is_keep_alive):
	Gone. Keepaliveness is a property of a particular message
	exchange, not the connection.
	(soup_connection_set_in_use, soup_connection_is_in_use): Add these
	since the in_use field is now private.

	* libsoup/soup-context.c (soup_context_connect_cb): weak ref each
	new connection
	(connection_destroyed): Remove the connection from the server's
	list when it's destroyed
	(try_create_connection): Simplify this since it doesn't have to
	worry about immediate success/failure of soup_connection_new any
	more.
	(soup_context_cancel_connect): Unref the connection

	* libsoup/soup-message.c (release_connection): Just call
	soup_connection_set_in_use (conn, FALSE).
	(close_connection): Close the connection.
	(soup_message_cancel): Close the connection

	* libsoup/soup-queue.c (soup_queue_error_cb): Close the connection
	(soup_queue_read_headers_cb): Don't look at Connection header
	here.
	(soup_queue_read_done_cb): Do it here, and close the connection if
	apropriate

	* libsoup/soup-private.h: remove SoupConnection def

	* libsoup/soup-dns.c (soup_gothost): Clear the source_id here
	rather than in soup_gethostby_cb, so that it gets cleared in the
	idle case too
	(soup_gethostbyname): Fix the sense of the expiration check, and
	never expire an entry that has pending returns

2003-04-15  Dan Winship  <danw@ximian.com>

	* libsoup/soup-socket.c (soup_socket_client_new): New
	"constructor". Replaces soup_socket_new and
	soup_socket_connect_by_name (and soup_socket_connect_by_addr,
	which is gone since it wasn't being used)
	(soup_socket_connect_cancel): Gone. The caller can just unref the
	socket before it finishes connecting.
	(connect_watch): Don't clear O_NONBLOCK here since soup-connection
	was just turning it back on.

	* libsoup/soup-connection.c (soup_connection_from_socket): Don't
	set TCP_NODELAY and O_NONBLOCK here, do it in soup-socket
	(soup_connection_new_via_proxy): Update for soup_socket_client_new
	(soup_connection_cancel_connect): No need to cancel socket connect
	now.

	* libsoup/soup-address.c (soup_address_cancel_get_name): s/NULL/0/

2003-04-14  Dan Winship  <danw@ximian.com>

	* libsoup/soup-address.c: Make this a GObject.
	(soup_address_new_from_hostent): New constructor. With soup-dns,
	replaces soup_address_new, soup_address_resolve.
	(soup_address_new_any): Combines old _any_ipv4 and _any_ipv6 funcs
	(soup_address_get_physical): Renamed from "get_canonical_name"

	* libsoup/soup-dns.c (soup_ntop): Make this non-static

	* libsoup/soup-server.c (soup_server_new):
	s/soup_address_ipv4_any()/soup_address_new_any(AF_INET)/
	(read_headers_cb): s/get_canonical_name/get_physical/
	(soup_server_context_get_client_host): Likewise

	* libsoup/soup-socket.c: Use soup-dns interfaces as needed, use
	g_object_ref/unref on SoupAddresses
	* libsoup/soup-socks.c: Likewise

	* tests/timeserver.c (main): Use soup_address_new_any. Don't use
	soup_address_get_name_sync since it doesn't exist any more.

2003-04-14  Dan Winship  <danw@ximian.com>

	* libsoup/soup-dns.c: New. Move most of the DNS code here from
	SoupAddress.

	* libsoup/soup-address.c: (soup_address_new,
	soup_address_get_name): Use soup-dns
	(soup_address_hash, soup_address_equal): Remove since soup-address
	doesn't hash addresses now.
	(...) Remove lots of other stuff that's in soup-dns now

	* libsoup/Makefile.am (libsoupinclude_HEADERS): add soup-dns.h
	(libsoup_2_0_la_SOURCES): and soup-dns.c

	* libsoup/soup-socket.c (done_connect): clear the connect_func
	before calling it so that if the socket gets finalized from the
	callback we don't crash.

2003-04-14  Dan Winship  <danw@ximian.com>

	* libsoup/soup-socket.c: Make SoupSocket a GObject. All fields are
	now private.
	(soup_socket_new): Now just returns a (unconnected) socket.
	(soup_socket_connect_by_addr, soup_socket_connect_by_name):
	Replace the old soup_socket_new and soup_socket_connect calls.
	Work on an already existing (but not connected) socket. Errors are
	now always returned async, never immediately.
	(soup_socket_connect_cancel): Takes an actual SoupSocket now
	rather than a "connect id"
	(soup_socket_ref, soup_socket_unref): No longer needed

	* configure.in: Update glib check to include gobject

	* libsoup/soup-private.h (SOUP_MAKE_TYPE): gobject helper, copied
	from E_MAKE_TYPE in gal.

	* libsoup/soup-server.c: Use g_object_ref/unref on sockets.
	* libsoup/soup-socks.c: Likewise

	* libsoup/soup-connection.c (connection_free): Use g_object_unref
	(soup_connection_from_socket): Ref the socket
	(SoupConnectData): Change the connect_tag to an actual socket.
	(soup_connection_new_cb): Unref the socket when cleaning up.
	(soup_connection_new_via_proxy): Update soup_socket_connect call
	to use soup_socket_new and soup_socket_connect_by_name.
	(soup_connection_cancel_connect): Update call to
	soup_socket_connect_cancel.

	* tests/get.c (main): Call g_type_init().
	* tests/simple-httpd.c (main): Likewise
	* tests/timeserver.c (main): Likewise

2003-04-11  Dan Winship  <danw@ximian.com>

	* libsoup/soup-misc.c (soup_set_proxy, soup_get_proxy): Remove.
	Proxies must be dealt with at the connection level, not globally.
	(soup_set_connection_limit, soup_get_connection_limit): Remove.
	Connection limits should be per host/per context, not global.
	(soup_set_security_policy, soup_get_security_policy): Remove. Not
	used.
	(soup_set_authorize_callback): Remove. Authorize callbacks need to
	be per context, not global

	* libsoup/soup-auth.h: Move SoupAuthType definition here from
	soup-misc.h

	* libsoup/soup-context.c (try_create_connection): Remove
	connection limit refs
	(prune_least_used_connection): Removed

	* libsoup/soup-connection.c: Remove last_used_id field since
	soup-context no longer prunes connections

	* libsoup/soup-message.h: Remove unused NO_PIPELINE and NO_COOKIES
	flags

	* libsoup/soup-message.c (authorize_handler): Remove global
	authorize handler stuff.

	* libsoup/soup-queue.c (soup_debug_print_headers): Removed

	* libsoup/soup-openssl.c: 
	* libsoup/soup-ssl-proxy.c: 
	* libsoup/soup-ssl.c:
	* libsoup/soup-nss.c: Remove security policy stuff

	* tests/get.c (main): Remove connection limit code

2003-04-11  Dan Winship  <danw@ximian.com>

	* libsoup/soup-ntlm.[ch]: Remove. NTLM totally violates the HTTP
	auth spec, and shoehorning it into soup just adds a lot of
	complexity. In the new-and-improved API, we should be able to
	handle NTLM auth externally to libsoup.

	* libsoup/Makefile.am (libsoupinclude_HEADERS,
	libsoup_2_0_la_SOURCES): remove soup-ntlm

	* libsoup/soup-auth.c: Remove NTLM code

	* libsoup/soup-server-auth.c: Remove NTLM code which was never
	completed and never could have been anyway.

	* libsoup/soup-private.h: Remove "auth" field from SoupConnection.

	* libsoup/soup-message.c (soup_message_requeue): Remove all the
	complicated stuff here that was only to deal with NTLM
	(authorize_handler): Remove NTLM handling.

	* libsoup/soup-queue.c (soup_encode_http_auth): Remove NTLM code

2002-11-22  Dan Winship  <danw@ximian.com>

	* libsoup/soup-types.h: New, typedefs for basic soup structs, to
	prevent #include loops.

	* libsoup/Makefile.am (libsoupinclude_HEADERS): add soup-types.h

	* update #includes appropriately

2002-11-22  Dan Winship  <danw@ximian.com>

	* libsoup/soup-uri.c: Update this to match RFC 2396. In
	particular: Don't parse "parameters" separately from "path", never
	copy a "fragment" from the base URI, and consider the relative URI
	"?x" to have a path of "" rather than no path. Also fix a bug that
	could result in the port not getting set to the right default when
	resolving certain relative URIs.

	* tests/uri-parsing.c: Update the tests and answers to match the
	examples from RFC 2396.

2002-11-19  Dan Winship  <danw@ximian.com>

	* libsoup/soup-message.c: Move context into SoupMessagePrivate.
	Update for that.
	(soup_message_get_uri): New, to get the URI from a SoupMessage
	(which is all most people ever wanted the context for)

	* libsoup/soup-auth.c (compute_response, digest_auth_func): Use
	soup_message_get_uri.

	* libsoup/soup-queue.c: Likewise

	* libsoup/soup-server.c (call_handler, read_done_cb): Likewise.

	* libsoup/soup-server-auth.c (parse_digest): Likewise.

	* tests/get.c (got_url): Likewise.

	* tests/simple-httpd.c (server_callback): Likewise.

2002-11-18  Dan Winship  <danw@ximian.com>

	* libsoup/soup-server.c (struct _SoupServer): Moved here from
	soup-private.h
	(SoupServerMessage): Made private and changed around a bit. This
	is now a wrapper around SoupMessage.
	(message_new): Create a new empty SoupServerMessage and then call
	soup_message_construct on it.
	(various): Update to deal with casting SoupMessage to
	SoupServerMessage to get the server, socket, etc fields rather
	than using msg->priv->server, server_sock, server_msg.
	(soup_server_message_new, soup_server_message_get_source): Gone
	(soup_server_message_start, soup_server_message_add_data,
	soup_server_message_finish): Now take a SoupMessage.

	* libsoup/soup-private.h (struct _SoupServer): Gone. Now private
	to soup-server.c
	(struct _SoupMessagePrivate): Remove the server, server_sock, and
	server_msg fields.

	* libsoup/soup-message.c (soup_message_construct): New.
	(soup_message_new): Use it.

2002-11-18  Dan Winship  <danw@ximian.com>

	* libsoup/soup-socket.c (struct _SoupSocket): Moved here from
	soup-private.h.
	(soup_socket_connect, soup_socket_server_new, soup_socket_new):
	Take an "ssl" argument saying whether or not to use SSL.
	(soup_socket_new_cb): Call soup_socket_start_ssl if needed.
	(server_accept_internal): Likewise.
	(soup_socket_get_local_address, soup_socket_get_local_port): Get
	the local address/port, regardless of socket type.
	(soup_socket_get_remote_address, soup_socket_get_remote_port): Get
	remote address/port, regardless of socket type.
	(soup_socket_start_ssl): Call soup_ssl_get_iochannel and wrap our
	iochannel with the result.

	* libsoup/soup-connection.c (soup_connection_from_socket): Don't
	need to worry about SSL here.
	(soup_connection_new_cb): Use soup_socket_start_ssl after CONNECT.
	(soup_connection_new_via_proxy): Pass the "ssl" arg to
	soup_socket_connect.
	(soup_connection_get_iochannel): Just call
	soup_socket_get_iochannel. We don't have our own iochannel any
	more.

	* libsoup/soup-server.c (soup_server_new): Pass "ssl" arg to
	soup_socket_server_new.
	(read_headers_cb): Use soup_socket_get_local_address and
	soup_address_get_canonical_name rather than using socket functions
	(conn_accept): Don't need to handle SSL here any more.

	* libsoup/soup-ssl.c (soup_ssl_get_iochannel): Make this take a
	SoupSSLType argument so it can be used for either client or
	server.

	* libsoup/soup-private.h (struct _SoupSocket): Gone. Private to
	soup-socket.c now.
	(struct _SoupConnection): Remove "channel" member.

	* tests/timeserver.c: Fix so that it uses IPv4 again if you don't
	pass "-6", and add a "-s" arg to do SSL.

2002-11-18  Dan Winship  <danw@ximian.com>

	* libsoup/soup-connection.c: New, split SoupConnection stuff out
	of soup-context.c. (A SoupConnection wraps a SoupSocket and also
	handles proxies and keepalive-ness.)

	* libsoup/soup-private.h (struct _SoupConnection): Remove the
	server and context fields, which are no longer relevant to a
	SoupConnection, and the port field, which can be extracted from
	the socket if needed.

	* libsoup/soup-context.c: Remove SoupConnection code and update
	accordingly. (SoupContext still handles try_existing_connections,
	soup_connection_limit, and timeouts to wait for a connection to
	become available.)

	* libsoup/soup-queue.c: Remove proxy-handling code. SoupConnection
	does this itself now.

	* libsoup/soup-socks.c: Make this work at the SoupSocket level
	rather than the SoupConnection level.

	* libsoup/Makefile.am: add soup-connection.[ch]

2002-11-18  Dan Winship  <danw@ximian.com>

	* libsoup/soup-error.c: add SOUP_ERROR_CANT_RESOLVE and
	SOUP_ERROR_CANT_RESOLVE_PROXY. Consistentify the capitalization of
	the transport error phrases.

	* libsoup/soup-address.c: Replace SoupAddressStatus with
	SoupKnownErrorCode (SOUP_ERROR_OK and SOUP_ERROR_CANT_RESOLVE)

	* libsoup/soup-context.c: Replace SoupConnectErrorCode with
	SoupKnownErrorCode (SOUP_ERROR_OK, SOUP_ERROR_CANT_RESOLVE, and
	SOUP_ERROR_CANT_CONNECT)

	* libsoup/soup-socket.c: Replace SoupSocketConnectStatus and
	SoupSocketNewStatus with SoupKnownErrorCode (SOUP_ERROR_OK,
	SOUP_ERROR_CANT_RESOLVE and SOUP_ERROR_CANT_CONNECT).

	* libsoup/*.c: Update for status code changes.
	
2002-11-18  Dan Winship  <danw@ximian.com>

	* libsoup/soup-error.c: Fix spelling of
	SOUP_ERROR_MOVED_PERMANENTLY and its description.

	* tests/simple-httpd.c: Very simple httpd using soup-server, based
	somewhat on the old soup-httpd.

	* tests/Makefile.am (noinst_PROGRAMS): build simple-httpd

2002-11-17  Dan Winship  <danw@ximian.com>

	* libsoup/soup-uri.c: Update with newer code taken from Camel.
	Handles relative URIs, URI parameters and fragments, and does
	%-encoding/decoding in the appropriate places.
	(soup_uri_to_string): Change the second arg to be "just_path",
	which specifies the caller wants just the path (and params and
	query) parts.
	(soup_uri_encode, soup_uri_decode): New.

	* libsoup/soup-auth.c (compute_response): Use soup_uri_to_string.
	(digest_auth_func): Likewise.
	* libsoup/soup-queue.c (soup_get_request_header): Likewise
	* libsoup/soup-server-auth.c (parse_digest): Likewise

	* libsoup/soup-message.c (soup_message_get_request_header, etc):
	Remove long-deprecated API.

	* libsoup/soup-context.c (soup_context_uri_hash,
	soup_context_uri_equal): Don't include query in the comparison.
	Two URIs that are identical except for query can still use the
	same auths.

	* tests/uri-parsing.c: SoupUri test program (also stolen from
	Camel)

	* tests/timeserver.c: Add "-6" to listen on the IPv6 local address
	instead of IPv4. (Tested on OS X.)

	* tests/get.c: Add "-r" for recursive get. (Tests the connection
	re-use and timeout code.)

	* tests/Makefile.am: re-enable timeserver, add uri-parsing.

2002-11-16  Dan Winship  <danw@ximian.com>

	* libsoup/soup-message.c (soup_message_queue): Set the callback
	and user_data before calling soup_queue_message.
	(requeue_read_error, requeue_read_finished, soup_message_requeue):
	Don't need to re-pass callback and user-data to
	soup_queue_message.

	* libsoup/soup-queue.c (soup_queue_message): Just take the
	message, not the callback and user_data (since no code ever
	changes those after they're first passed to soup_message_queue).

	* libsoup/soup-private.h (SoupHost): Add a "port" field.
	(SoupConnections to a given host are already being separated by
	port, and SoupAuths should be as well according to RFC2617).
	(SoupMessagePrivate): Remove unused "timeout_tag" field.
	
	* libsoup/soup-context.c (soup_context_host_hash,
	soup_context_host_equal): SoupHost hash functions.
	(soup_context_from_uri): Make soup_hosts a hash table on SoupHost
	so we can hash on port as well.
	(soup_context_unref): Update for that.
	(try_existing_connections): Don't need to filter on port now since
	the SoupHost will only have connections to a single port.

	* libsoup/soup-address.c (soup_address_hash): Don't use s6_addr32
	since it's apparently non-portable. Use s6_addr instead.
	(soup_gethostbyaddr): fix a sometimes-uninitialized variable.

	* libsoup/soup-socket.c (soup_socket_connect): remove unused
	variable.

	* libsoup/soup-openssl.c (soup_openssl_read): Use gsize.
	* libsoup/soup-server.c (cgi_read): Likewise
	* libsoup/soup-socks.c (soup_socks_write, soup_socks_read):
	Likewise.
	* libsoup/soup-ssl-proxy.c (soup_ssl_proxy_readwrite): Likewise.
	* libsoup/soup-transfer.c (soup_transfer_read_cb,
	soup_transfer_write_cb): Likewise.

2002-11-15  Dan Winship  <danw@ximian.com>

	* libsoup/*: Change old Helix Code refs to Ximian (and update
	copyright dates).

2002-11-15  Frank Belew  <frb@ximian.com>

	* tests/Makefile.am: uncomment lines to make timeserver build 
	correctly
	
2002-11-14  Joe Shaw  <joe@ximian.com>

	* libsoup/soup-address.c (soup_address_new): When we get an
	address from the hash, call our address lookup callback or else
	the connection will hang.

2002-11-13  Dan Winship  <danw@ximian.com>

	* tests/timeserver.c: Oops, commit this.

	* tests/Makefile.am (noinst_PROGRAMS): reenable timeserver.

2002-11-13  Joe Shaw  <joe@ximian.com>

	* libsoup/Makefile.am: Replace the BINDIR define with LIBEXECDIR.
	(install-exec-hook): Install libsoup-ssl-proxy into libexecdir
	instead of bindir.

	* libsoup/soup-openssl.c (soup_openssl_close): Call SSL_shutdown()
	to properly shut down the SSL connection before closing the
	socket.

	* libsoup/soup-ssl-proxy.c (soup_ssl_proxy_readwrite): Close the
	iochannels before quitting the main loop.

	* tests/Makefile.am: disable building timeserver, the source file
	wasn't added.

2002-11-12  Dan Winship  <danw@ximian.com>

	* configure.in: Check for IPv6 support in networking headers.

	* libsoup/soup-address.c: Make the internal structure of
	SoupAddress entirely private, and make SoupAddress be more like a
	hostent and less like a sockaddr. (Ie, make it not have a port
	associated with it.) Document undocumented functions. Add
	completely-untested support for IPv6.
	(soup_address_new_from_sockaddr): New, to parse a sockaddr into a
	SoupAddress and a port.
	(soup_address_ipv4_any, soup_address_ipv6_any): Return static
	addresses corresponding to the IPv6 and IPv6 "any" addresses.
	(soup_address_get_canonical_name): Use inet_ntop/inet_ntoa.
	(soup_address_make_sockaddr): Now constructs a new sockaddr, which
	may be a sockaddr_in or sockaddr_in6.
	(soup_address_gethostname, soup_address_gethostaddr): Remove
	these. They aren't reliable, especially on multihomed hosts.
	(soup_gethostbyname, soup_gethostbyaddr): support IPv6
	(soup_address_new): Keep pending lookups in a separate hash table
	from completed lookups. Fix a bug when canceling a lookup when
	there was more one outstanding request for it.
	(soup_address_lookup_in_cache): Removed.

	* libsoup/soup-socket.c: Add a port field to SoupSocket (since
	it's not in SoupAddress any more).
	(soup_socket_connect): Simplify this. Don't use
	soup_address_lookup_in_cache, just call soup_address_new, since we
	already know the code can deal with the callback being invoked
	immediately.
	(soup_socket_new_sync, soup_socket_new): Take a port argument.
	(soup_socket_server_new): Take a SoupAddress to use as the local
	address to bind to. This lets the caller choose between the IPv4
	and IPv6 "any" addresses, and also lets you bind to a single
	interface of a multi-homed machine.
	(soup_socket_server_accept, soup_socket_server_try_accept): Merge
	the common code.

	* libsoup/soup-server.c (soup_server_new): Pass
	soup_address_ipv4_any() to soup_socket_server_new().

	* libsoup/soup-socks.c (soup_connect_socks_proxy,
	soup_socks_write): Fix up for the API changes, but it won't work
	with IPv6 yet.

	* tests/timeserver.c: Another really simple test, for the server
	socket code.

	* tests/Makefile.am: build timeserver

2002-11-11  Dan Winship  <danw@ximian.com>

	* libsoup/soup-address.c: Move the SoupAddress code from
	soup-socket.c and soup-socket-unix.c to here.

	* libsoup/soup-socket.c: Move the remaining code from
	soup-socket-unix.c here.

	* libsoup/soup-socket-unix.c: Gone

	* tests/get.c: really really trivial test program

	* configure.in (AC_OUTPUT):
	* Makefile.am (SUBDIRS): add tests/

2002-11-05  Dan Winship  <danw@ximian.com>

	* Split libsoup out of soup. ChangeLog.old contains the original
	soup ChangeLog.

	* Makefile.am, etc: Fix things up to work with the new directory
	layout. Disable docs until we fix them.

	* autogen.sh: Use gnome-autogen.sh

	* configure.in: Require autoconf 2.53. Remove stuff that was only
	needed for httpd or wsdl code. Remove glib1 support. Bump version
	to 2.0.

	* libsoup/Makefile.am: Rename library to libsoup-2.0, put includes
	in ${includedir}/soup-2.0
	
	* libsoup/*: Merge soup-0-7 back onto the trunk. Remove
	SOAP-specific stuff, Windows support, and other things that
	weren't being maintained.

	* soup-config.in, soupConf.sh: Kill these. We only support
	pkg-config now.
